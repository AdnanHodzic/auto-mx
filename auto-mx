#!/bin/bash
#
# Mendix Installer (auto-mx)
# Utility to interactively install and setup
# Mendix, as well rest of utility's which
# are needed to run Mendix applications.
#
# Files *
# Licence: Mendix (proprietary)
# Copyright: 2014 © Mendix
#
# Files: auto-mx, debian/*
# Copyright: 2014 Adnan Hodzic <adnan.hodzic@mendix.com>
# Licence: GPL-3.0+
#·
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#·
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#·
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Root Checker
root_check(){
if [[ $EUID -ne 0 ]]; then
   echo "Please run \"auto-mx\" as root user" 1>&2
   exit 1
fi
}

# Service Settings
service_settings(){

# System User Account
app_system_user_func(){
echo -e "--------------------------------------------------------\n"
read -p "Specify \"System User Account\" i.e (mediapp): " app_system_user
}

# $app_system_user Checker
app_system_user_checker(){
if id $app_system_user > /dev/null 2>&1
then
	echo -e "\n+++++++++++++++++++++++++++\n"
	echo -e "User exists!\n"
	echo "Try with different username" 
	echo -e "\n+++++++++++++++++++++++++++\n"	
	read key
	app_system_user_func
fi
}

# Application Name 
app_displayname_func(){
echo -e "\n--------------------------------------------------------\n"
read -p "Specify \"Application Name\", i.e (Media App): " app_displayname
}

# Startup Type
app_startup_func(){
echo -e "\n--------------------------------------------------------\n"
echo -e "Start Mendix at boot?"
read -p "[Y]es, [N]o, [S]kip: " app_startup

for letter in "$app_startup"; do

if [[ "$letter" == [Yy] ]]; 
then
	# Start Mendix at boot
	crontab -l > bootmx
	echo -e "#Start Mendix at boot\n@reboot /usr/bin/m2ee start" >> bootmx
	crontab bootmx
	rm bootmx

	boot="Yes"	
	continue

elif [[ "$letter" == [Nn]* ]]; 
then
	echo -e "\nMendix will not start at boot ...\n"
	boot="No"
	continue

elif [[ "$letter" == [Ss]* ]]; 
then
	echo -e "\nSetting Mendix at boot, skipped ..."
	boot="Option skip"
	
	continue

else 
	echo -e "\n-----------------------------------------\n"
	echo    "Non existing value: exiting ..."
	echo -e "\n-----------------------------------------\n"
	
	exit 1
fi
done
}

# Automagically generate "admin_pass/app_password" 
app_password_func(){
app_password="$(cat /dev/urandom| tr -cd "A-z1-9\!@#&" | head -c16)"
}

spec(){
echo -e "\n--------------------------------------------------\n"
echo -e "You've specified following values:"
echo -e "\n++++++++++++++++++++++++++++++++++++++++++++++++++\n"
echo -e "System User Account: $app_system_user"
echo -e "Application name: $app_displayname"
echo -e "Start at boot: $boot"
echo -e "\n++++++++++++++++++++++++++++++++++++++++++++++++++\n"
}
}

# Confirm Service Settings
service_settings_confirm(){

while [ service_settings_confrim != "Q" ]
do 
clear

spec

echo "[N]ext Step, [E]edit Existing: "

read -p ": " service_settings_confrim
	case $service_settings_confrim in 

	Q|q)
		echo "Goodbye!"
		exit
	;;

	N|n)
		echo "Moving to next step"
		break
	;;
	
	E|e)
		spec
	
		echo -e "\nWhat would you like to edit?\n"
		echo "[1] System User Account"
		echo "[2] Application Name"
		echo "[3] Start at boot"
	
	read -p "Enter option number: " service_settings_edit

	for letter in "$service_settings_edit"; do

	if [[ "$letter" == [1] ]]; 
	then
		app_system_user_func
		spec

	elif [[ "$letter" == [2] ]]; 
	then
		app_displayname_func
		spec

	elif [[ "$letter" == [3] ]]; 
	then
		app_startup_func
		spec

	else
		echo "Seriously?"
		# exit | exit 1			

	fi
	done
	;;

	F|f)
		echo "my work is done here"
		break
	;;

	*) 
	echo "Non existing value"
	;;
	
	esac

	echo "press Enter for menu"
	read key
done
}

# Destination Path
destination_path_func(){

# Define custom path
custom_appdest_func(){
echo -e "------------------------------------------------------------\n"
read -p "Specify custom app. destination, i.e (/opt/mxapp): " path
}

custom_path_spec(){
echo -e "\n----------------------------------------------------------\n"
echo -e "You've specified following location as your custom"
echo -e "\napp. path: \"$path\""
echo -e "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
}

while [ destination_path != "Q" ]
do
clear

# Specify destination path
echo -e "\n------------------------------------------\n"
echo -e "Specify location of apps and server files "
echo -e "\n++++++++++++++++++++++++++++++++++++++++++\n"
echo -e "We recommend: /srv/mendix/$app_system_user"
echo -e "to be your path."
echo -e "\n++++++++++++++++++++++++++++++++++++++++++\n"

echo -e "[A]ccept and proceed"
echo -e "[C]ustomize your own path"
#echo -e "[Q]uit"

# Destination Path Start
read -p ": " destination_path_init

    case $destination_path_init in

    A|a )
    	path="/srv/mendix/$app_system_user"
		
		# Jump to Database Configuration
		db_config
	;;

    C|c )
		# calling custom destination func
		custom_appdest_func	
		custom_path_spec
		
		# confirm custom path
		destination_path_confirm_func
    ;;

	Q|q)
		echo "Aborting installation"
		exit 1
	;;

	*) 
	echo "Non existing value"
	;;

    esac
    echo "press Enter for menu"
	read key
done
}

# destination_path_confirm function
destination_path_confirm_func(){

while [ destination_path_confirm != "Q" ]
do
clear

custom_path_spec

echo "[N]ext Step, [E]dit Existing: "

read -p ": " destination_path_confirm
    case $destination_path_confirm in

    Q|q)
        echo "Goodbye!"
        exit
    ;;

    N|n)
        db_config 
		#break
    ;;

	E|e)
		custom_path_spec
		custom_appdest_func
	;;
	esac
done
}


# Installer started (install_start) 
install_start_func(){
while [ install_start != "Q" ]
do 
clear

# Display menu
echo -e "\n----------------------------------------------------\n"
echo -e "Welcome to Mendix installer (auto-mx)\n"
echo -e "\nPlease follow on-screen instructions"
echo -e "\n----------------------------------------------------\n"

echo -e "Continue?\n"
echo "[Y]es"
echo "[N]o"
#echo "[Q]uit"

default="y"

read -e -i "$default " -p ": " install_start
default="${input:-$default}"

	case $install_start in
	
	Q|q)
		echo "Goodbye!"
		exit 1
	;;

	Y|y)
	# calling service_settings functions
	#app_servicename_func
	app_system_user_func
	app_system_user_checker
	app_displayname_func
	#app_description_func
	app_startup_func
	#app_username_func
	app_password_func

	spec
	break	
	;;

	N|n)
		echo "Aborting installation"
		exit 1
	;;

	*) 
	echo "Non existing value"
	;;
	
	esac

	echo "press Enter for menu"
	read key
done
}

# goodbye message
goodbye(){
echo -e "\n-------------------------------------------------\n"
echo -e "Installation complete!\n"
echo -e "For any additional customization please take"
echo -e "take a look in: /home/$app_system_user/.m2ee/m2ee.yaml"
echo -e "\n-------------------------------------------------\n" 
exit
}


# Database configuration
db_config(){

# db_type
db_type_func(){
echo -e "\n----------------------------------------------------------\n"
#read -p "Specify \"Database Type\", i.e (PostgreSQL): " db_type
read -p "Specify \"Database Type\":

[1] PostgreSQL
[2] Oracle
[3] MS SQL

Enter option number: " db_type_select

for letter in "$db_type_select"; do

	if [[ "$letter" == [1] ]];
	then
		db_type="PostgreSQL"

	elif [[ "$letter" == [2] ]];
	then
		db_type="Oracle"

	elif [[ "$letter" == [3] ]];
	then
		db_type="MS SQL"
	
	else
		echo "Seriously?"
		# exit | exit 1
	fi
done

} 

# db_host
db_host_func(){
echo -e "\n----------------------------------------------------------\n"
read -p "Specify \"Database Host\", i.e (127.0.0.1): " db_host
}

# db_port
db_port_func(){
echo -e "\n----------------------------------------------------------\n"
read -p "Specify \"Database Port\", i.e (5432): " db_port
}

# db_name
db_name_func(){
echo -e "\n----------------------------------------------------------\n"
read -p "Specify \"Database Name\", i.e (mxpgdb): " db_name
}

# db_username
db_user_func(){
echo -e "\n----------------------------------------------------------\n"
read -p "Specify \"Database Username\", i.e (mxpgusr): " db_user
}

# db_password
db_pass_func(){
echo -e "\n----------------------------------------------------------\n"
read -p "Specify \"Database Password\", i.e (mx7gdb_p5w): " db_pass
}

db_spec(){
echo -e "\n----------------------------------------------------------\n"
echo -e "You've specified following values:"
echo -e "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
echo -e "Database type: $db_type"
echo -e "Database host: $db_host"
echo -e "Database port: $db_port"
echo -e "Database name: $db_name"
echo -e "Database username: $db_user"
echo -e "Database password: $db_pass"
echo -e "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
}

# DB Init start
while [ db_init != "Q" ]
do
clear

# Display menu
echo -e "\n------------------------------------------------\n"
echo -e "Set up Database?"
echo -e "\n------------------------------------------------\n"
echo -e "[Y]es"
echo -e "[D]efault/Local install (Not endorsed by Mendix)"
#echo -e "[Q]uit"

read -p ": " db_init
	case $db_init in

	Q|q)
		echo "Goodbye!"
		exit 1
	;;

	Y|y)
		# calling db functions
		db_type_func
		db_host_func
		db_port_func
		db_name_func
		db_user_func
		db_pass_func

		db_spec
		
		db_config_confirm_func
	;;

	D|d)
		# postgres local setup
		su - postgres -c "psql -d template1 -U postgres -c \"CREATE USER mxpgusr WITH PASSWORD 'mx7gdb_p5w' \" "
		su - postgres -c "psql -d template1 -U postgres -c \"CREATE DATABASE mxpgdb \" "
		su - postgres -c "psql -d template1 -U postgres -c \"GRANT ALL PRIVILEGES ON DATABASE mxpgdb to mxpgusr \" "
		
		echo -e "\nFinished with PostgresSQL local setup\n"
		echo -e "\nEnter any key to continue"
		read key
		
		java_config
		java_config_confirm
	;;
	
	S|s)
		echo "\nSkipping database configuration/install ....\n"
		#exit 1
		break
	;;

	*)
		echo "Non existing value"
	;;

	esac
	
	echo "press Enter for menu"
	read key
done
}

db_spec(){
echo -e "\n-----------------------------------------\n"
echo -e "\nYou've specified following values:\n"
echo -e "\n++++++++++++++++++++++++++++++++++++++++\n"
echo -e "Database type: $db_type"
echo -e "Database host: $db_host"
echo -e "Database port: $db_port"
echo -e "Database name: $db_name"
echo -e "Database username: $db_user"
echo -e "Database pasword: $db_password\n"
}

db_config_confirm_func(){

#db_config_confirm
while [ db_config_confirm != "Q" ]
do
clear

# No need for this call?
db_spec

echo "[N]ext Step, [E]dit Existing: "

read -p ": " db_config_confirm
	case $db_config_confirm in

	Q|q)
		echo "Goodbye!"
		exit
	;;

	N|n)
		echo "Moving to next step"
		java_config
	;;

	E|e)
		db_spec

		echo -e "\nWhat would you like to edit\n"
		echo "[1] Database type"
		echo "[2] Database host"
		echo "[3] Database port"
		echo "[4] Database name"
		echo "[5] Database username"
		echo "[6] Database password"

	read -p "Enter option number: " db_config_edit

	for letter in "$db_config_edit"; do

	if [[ "$letter" == [1] ]];
	then
		db_type_func
		db_spec

	elif [[ "$letter" == [2] ]];
	then
		db_host_func
		db_spec

	elif [[ "$letter" == [3] ]];
	then
		db_port_func
		db_spec
	
	elif [[ "$letter" == [4] ]];
	then
		db_name_func
		db_spec

	elif [[ "$letter" == [5] ]];
	then
		db_user_func
		db_spec
	
	elif [[ "$letter" == [6] ]];
	then
		db_pass_func	
		db_spec
	
	#elif [[ "$letter" == [Ff] ]];
	#then
	#	echo "finishing up"
	#	break

	else 
		echo "Seriously?"
		# exit | exit 1

fi
done
;;

F|f)
	echo "my work is done here"
	break
;;

*)
	echo "non existing value"
;;

esac

echo "press Enter for menu"
read key
done
}

# Configuration Management
config_mgmt_func(){

# User creation
echo -e "\nCreating "$app_system_user" user ...\n"
adduser --disabled-password --gecos "$app_displayname" $app_system_user

# Create a directory structure
mkdir -p $path
mkdir -p $path/web
mkdir -p $path/model
mkdir -p $path/data
mkdir -p $path/data/database
mkdir -p $path/data/files
mkdir -p $path/data/model-upload
mkdir -p $path/data/runtime
mkdir -p $path/data/tmp

# Fixing permissions
echo -e "\nFixing permissions\n"
chown $app_system_user:$app_system_user $path* -R
chmod 700 -R $path/data/
chmod 700 -R $path/model/

# m2ee.yaml contents
# move contents to: 
# /usr/share/doc/m2ee-tools/examples/auto-mx-template.m2ee.yaml
# Eventually put this template as file
# in auto-mx deb package.
yaml_content='# Full m2ee.yaml documentation available on:
# https://github.com/mendix/m2ee-tools/blob/develop/examples/full-documented-m2ee.yaml
mxnode:
 mxjar_repo: ${path}/data/runtime

m2ee:
 app_name: ${app_displayname}
 app_base: ${path}
 admin_port: 9000
 admin_listen_addresses: "*"
 admin_pass: ${app_password}
 runtime_port: 8000

 runtime_listen_addresses: "*"

 ${java_binary_path}

javaopts: [
   "-Dfile.encoding=UTF-8", "-XX:MaxPermSize=${java_permgen}", "-Xmx${java_heap_max}", "-Xms${java_heap_min}",
   "-Djava.io.tmpdir=/path/to/project/directory/data/tmp",
 ]

logging:
 - # example of file logging by the platform itself
   name: FileSubscriber
   type: file
   autosubscribe: INFO
   filename: /var/log/mendix/${app_system_user}/log
   max_size: 10485760 # bytes(!!)
   max_rotation: 7

mxruntime:
 DatabaseType: ${db_type}
 DatabaseHost: ${db_host}${db_port}
 DatabaseName: ${db_name}
 DatabaseUserName: ${db_user}
 DatabasePassword: ${db_pass}

 MicroflowConstants:
  Module.Constant: text
  AnotherModule.AnotherConstant: bla

 ScheduledEventExecution: NONE
 MyScheduledEvents:
  - Module1.Event1
  - Module2.Event2
  - Module3.Event3'

yaml=/home/$app_system_user/.m2ee/m2ee.yaml

# .m2ee creation
echo -e "\nm2ee creation\n"
mkdir -p /home/$app_system_user/.m2ee
#touch $yaml

# create log file
mkdir -p /var/log/mendix/$app_system_user
touch /var/log/mendix/$app_system_user/log

# todo
# make a loop if the $yaml already exists
# ask user what to do
echo -n "$yaml_content" > "$yaml"

# todo
# make a phraser
# Yaml Interpreter
sed -i "s/\${app_system_user}/$app_system_user/g" $yaml
sed -i "s/\${app_displayname}/\"$app_displayname\"/g" $yaml
sed -i "s/\${app_password}/$app_password/g" $yaml
sed -i "s/\${db_type}/$db_type/g" $yaml
sed -i "s/\${db_host}/$db_host/g" $yaml
sed -i "s/\${db_port}/:$db_port/g" $yaml
sed -i "s/\${db_name}/$db_name/g" $yaml
sed -i "s/\${db_user}/$db_user/g" $yaml
sed -i "s/\${db_pass}/$db_pass/g" $yaml
sed -i "s+\${java_binary_path}+$javabin$java_binary_path+g" $yaml
sed -i "s/\${java_heap_max}/$java_heap_max$mb/g" $yaml
sed -i "s/\${java_heap_min}/$java_heap_min$mb/g" $yaml
sed -i "s/\${java_permgen}/$java_permgen$mb/g" $yaml
sed -i "s+\${path}+$path+g" $yaml


# Make sure permissions are still correct
chown $app_system_user:$app_system_user -R /home/$app_system_user
goodbye
}


# Java Configuration
java_config(){

mb="M"

# Java Heap (Max Size)
java_heap_max_func(){
echo -e "\n----------------------------------------------------------\n"
read -p "Specify \"Java Heap Max Size\", i.e (512): " java_heap_max
} 

# Java Heap (Min Size)
java_heap_min_func(){
echo -e "\n----------------------------------------------------------\n"
read -p "Specify \"Java Heap Min Size\", i.e (512): " java_heap_min
}

# Max PermGen Size
java_permgen_func(){
echo -e "\n----------------------------------------------------------\n"
read -p "Specify \"Max PermGen Size\", i.e (128M): " java_permgen
}

javabin="javabin: "

# Java Binary Path
java_binary_path_func(){
echo -e "\n----------------------------------------------------------\n"
echo -e "Configure \"Java Binary Path\"? i.e: (/usr/bin/java)"
echo -e "\nThis step is optional, so you may as well skip it"

read -p "[Y]es, [S]kip: " java_bin

for letter in "$java_bin"; do

if [[ "$letter" == [Yy] ]];
then
	echo -e "\n----------------------------------------------------------\n"
	read -p ": " java_binary_path

elif [[ "$letter" == [Ss] ]];
then
	echo -e "\nSkipping ...\n"
	continue

else
	echo -e "\nCome on ...\n"
	read key
	# exit1
fi
done
}

# Java Binary Path Edit
java_binary_path_edit_func(){
echo -e "\n----------------------------------------------------------\n"
echo -e "Configure \"Java Binary Path\"? i.e: (/usr/bin/java)"
read -p ": " java_binary_path
}

java_spec(){
echo -e "\n----------------------------------------------------------\n"
echo -e "You've specified following values:"
echo -e "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
echo -e "Java Heap Max Size: $java_heap_max$mb"
echo -e "Java Heap Min Size: $java_heap_min$mb"
echo -e "Max PermGen Size: $java_permgen$mb"
echo -e "Java Binary Path: $java_binary_path"
echo -e "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
}

# Java Config Start
while [ java_init != "Q" ]
do
clear

# Display menu
echo -e "\n------------------------------------------------\n"
echo -e "Configure JVM Settings?"
echo -e "\n------------------------------------------------\n"
echo -e "[Y]es"
echo -e "[N]o, use default Mendix settings"
#echo -e "[Q]uit"

read -p ": " java_init
	case $java_init in

	Q|q)
		echo "Goodbye!"
		exit 1
	;;

	Y|y)
		# calling db functions
		java_heap_max_func
		java_heap_min_func
		java_permgen_func
		java_binary_path_func

		java_spec
		#break

		java_config_confirm_func
	;;

	N|n)
		java_heap_max="512"
		java_heap_min="512"
		java_permgen="128"

		echo -e "\nFinished with Java configuration\n"
		echo -e "Enter any key to continue"
		read key
		# make a different func jump?
	
		echo -e "\nRunning config_mgmt_func\n"
        config_mgmt_func
        echo -e "\nrunning goodbye\n"
        goodbye	

	;;
	
	#S|s)
	#	echo "\nSkipping database configuration/install ....\n"
	#	#exit 1
	#	break
	#;;

	*)
		echo "Non existing value"
	;;

	esac
	
	echo "press Enter for menu"
	read key
done
}

# java_config confirm
java_config_confirm_func(){

#java_config_confirm
while [ java_config_confirm != "Q" ]
do
clear

java_spec

echo "[N]ext Step, [E]dit Existing: "

read -p ": " java_config_confirm
	case $java_config_confirm in

	Q|q)
		echo "Goodbye!"
		exit
	;;

	N|n)
		config_mgmt_func	
	;;

	E|e)
		java_spec

		echo -e "\nWhat would you like to edit\n"
		echo "[1] Java Heap Max Size"
		echo "[2] Java Heap Min Size"
		echo "[3] Max PermGen Size"
		echo "[4] Java Binary Path"

	read -p "Enter option number: " java_config_edit

	for letter in "$java_config_edit"; do

	if [[ "$letter" == [1] ]];
	then
		java_heap_max_func
		java_spec

	elif [[ "$letter" == [2] ]];
	then
		java_heap_min_func
		java_spec

	elif [[ "$letter" == [3] ]];
	then
		java_permgen_func
		java_spec
	
	elif [[ "$letter" == [4] ]];
	then
		java_binary_path_edit_func
		#java_binary_path_func
		java_spec
	
	else 
		echo "Seriously?"
		# exit | exit 1

fi
done
;;

F|f)
	echo "my work is done here"
	break
;;

*)
	echo "non existing value"
;;

esac

echo "press Enter for menu"
read key
done
}

# Calls
# ToDo
# Clear out unused

# root check 
root_check

# call service settings
service_settings

# install start
install_start_func

# service settings confirm
service_settings_confirm

# destination path
destination_path_func
#destination_path_confirm_func

# post db_config/confirm?

# call service_settings/confirm
#service_settings
#service_settings_confirm

# call db_config/confirm
db_config
db_config_confirm_func

# call java_config/confirm
java_config
java_config_confirm_func

# nuff said
config_mgmt_func
goodbye

exit 0
