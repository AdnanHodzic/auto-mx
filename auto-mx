#!/bin/bash
#
# Mendix Installer (auto-mx)
# Utility to interactively install and setup
# Mendix, as well rest of utility's which
# are needed to run Mendix applications.

# Service Settings (service_settings)

# Service Name
app_servicename_func(){
echo -e "\n-----------------------------------------\n"
read -p "Specify \"Service Name\", i.e (NewApp): " app_servicename
}

# Display Name 
app_displayname_func(){
echo -e "\n-----------------------------------------\n"
read -p "Specify \"Display Name\", i.e (NewApp): " app_displayname
}

# Description:  
app_description_func(){
echo -e "\n-----------------------------------------\n"
read -p "Specify \"Description\": " app_description
}

# Startup Type
app_startup_func(){
echo -e "\n-----------------------------------------\n"
echo -e "Start Mendix at boot?"
read -p "[Y]es, [N]o, [S]kip: " app_startup

for letter in "$app_startup"; do

if [[ "$letter" == [Yy] ]]; 
then
	# Start Mendix at boot
	crontab -l > bootmx
	echo -e "#Start Mendix at boot\n@reboot /usr/bin/m2ee start" >> bootmx
	crontab bootmx
	rm bootmx

	boot="Yes"	
	continue

elif [[ "$letter" == [Nn]* ]]; 
then
	echo -e "\nMendix will not start at boot ...\n"
	boot="No"
	continue

elif [[ "$letter" == [Ss]* ]]; 
then
	echo -e "\nSetting Mendix at boot, skipped ..."
	boot="Option skip"
	
	continue

else 
	echo -e "\n------------------------------------\n"
	echo    "Non existing value: exiting ..."
	echo -e "\n------------------------------------\n"
	
	exit 1
fi
done
}

# Username 
app_username_func(){
echo -e "-----------------------------------------\n"
read -p "Specify \"User Name\": " app_username
}

# Password 
app_password_func(){
echo -e "\n----------------------------------------\n"
read -p "Specify \"User password\": " app_password
}

spec(){
echo -e "\n-----------------------------------------\n"
echo -e "\nYou've specified following values:\n"
echo -e "\n++++++++++++++++++++++++++++++++++++++++\n"
echo -e "Service name: $app_servicename"
echo -e "Display name: $app_displayname"
echo -e "Description: $app_description"
echo -e "Start at boot: $boot"
echo -e "App. username: $app_username"
echo -e "App. password: $app_password"
echo -e "\n++++++++++++++++++++++++++++++++++++++++\n"
}

# Installer started (install_start) 
while [ install_start != "Q" ]
do 
clear

# Display menu
echo -e "\n------------------------------------------\n"
echo -e "Welcome to Mendix installer (auto-mx)\n"
echo -e "\nPlease follow on-screen instructions"
echo -e "\n------------------------------------------\n"

echo -e "Continue?\n"
echo "[Y]es"
echo "[N]o"
echo "[Q]uit"

read -p ": " install_start
	case $install_start in
	
	Q|q)
		echo "Goodbye!"
		exit 1
	;;

	Y|y)
	# calling service_settings functions
	app_servicename_func
	app_displayname_func
	app_description_func
	app_startup_func
	app_username_func
	app_password_func

	spec
	break	
	;;

	N|n)
		echo "Aborting installation"
		exit 1
	;;

	*) 
	echo "Non existing value"
	;;
	
	esac

	echo "press Enter for menu"
	read key
done

# Specify destinaton path (destination_path)
destination_path(){

# Define custom path
custom_appdest_func(){
echo -e "-----------------------------------------\n"
read -p "Specify \"custom app. destination\": " custom_appdest
}

while [ destination_path != "Q" ]
do
clear

# Specify destination path
echo -e "\n------------------------------------------\n"
echo -e "Specify location of apps and server files "
echo -e "\n++++++++++++++++++++++++++++++++++++++++++\n"
echo -e "\nWe recommend: /srv/mendix/$app_servicename"
echo -e "\nto be your path.\n"
echo -e "\n++++++++++++++++++++++++++++++++++++++++++\n"

echo -e "[A]ccept and proceed"
echo -e "[C]ustomize your own path"
echo -e "[Q]uit"

read -p ": " destination_path

    case $destination_path in

    A|a )
    	path="/srv/mendix/$app_username"
    	echo "$path"
    	echo "movin on"
    	break
	;;

    C|c )
    	# todo
    	# extend this!
        read -p "Enter your own path: " path
        echo "Specified path: $path"   
        echo "Moving on"
		break
    ;;

	Q|q)
		echo "Aborting installation"
		exit 1
	;;

	*) 
	echo "Non existing value"
	;;

    esac
    echo "press Enter for menu"
	read key
done
}

# Confirm Service Settings
while [ service_settings_confrim != "Q" ]
do 
clear

spec

echo "[N]ext Step, [E]edit Existing, [F]inish: "

read -p ": " service_settings_confrim
	case $service_settings_confrim in 

	Q|q)
		echo "Goodbye!"
		exit
	;;

	N|n)
		echo "Moving to next step"
		# Jump to the next step
		destination_path
		break
	;;
	
	E|e)
		spec
	
		echo -e "\nWhat would you like to edit?\n"
		echo "[1] Service Name"
		echo "[2] Display Name"
		echo "[3] Description"
		echo "[4] Start at boot"
		echo "[5] App. username"
		echo "[6] App. password"
	
	read -p "Enter option number: " service_settings_edit

	for letter in "$service_settings_edit"; do

	if [[ "$letter" == [1] ]]; 
	then
		app_servicename_func
		spec

	elif [[ "$letter" == [2] ]]; 
	then
		app_displayname_func
		spec

	elif [[ "$letter" == [3] ]]; 
	then
		app_description_func
		spec

	elif [[ "$letter" == [4] ]]; 
	then
		app_startup_func
		spec

	elif [[ "$letter" == [5] ]]; 
	then
		app_username_func
		spec
	
	elif [[ "$letter" == [6] ]]; 
	then
		app_password_func
		spec
	elif [[ "$letter" == [Ff] ]]; 
	then
		echo "finishing"
		break

	else
		echo "Seriously?"
		# exit | exit 1			

	fi
	done
	;;

	F|f)
		echo "my work is done here"
		break
	;;

	*) 
	echo "Non existing value"
	;;
	
	esac

	echo "press Enter for menu"
	read key
done

# Configuration Management

# User creation
echo -e "\nCreating "$app_username" user ...\n"
adduser --disabled-password --gecos "$app_displayname" $app_servicename

# Create a directory structure
mkdir -p /srv/mendix/$app_servicename
mkdir -p /srv/mendix/$app_servicename/web
mkdir -p /srv/mendix/$app_servicename/model
mkdir -p /srv/mendix/$app_servicename/data
mkdir -p /srv/mendix/$app_servicename/data/database
mkdir -p /srv/mendix/$app_servicename/data/files
mkdir -p /srv/mendix/$app_servicename/data/model-upload
mkdir -p /srv/mendix/$app_servicename/data/runtime
mkdir -p /srv/mendix/$app_servicename/data/tmp

# Fixing permissions
echo -e "\nFixing permissions\n"
chown $app_servicename:$app_servicename -R /srv/mendix/$app_servicename
chmod 700 -R /srv/mendix/$app_servicename/data/
chmod 700 -R /srv/mendix/$app_servicename/model/

# m2ee.yaml contents
# move contents to: 
# /usr/share/doc/m2ee-tools/examples/auto-mx-template.m2ee.yaml
# Eventually put this template as file
# in auto-mx deb package.
yaml_content='# Full m2ee.yaml documentation available on:
# https://github.com/mendix/m2ee-tools/blob/develop/examples/full-documented-m2ee.yaml
#
# ~/.m2ee/m2ee.yaml
# user/application specific configuration
#
# All non-essential configuration settings have been omitted in this example
# file. Refer to the full-documented-m2ee.yaml in the examples directory for a
# full list of available options and explanation about them.
#
mxnode:
 # myjar (https://github.com/mendix/m2ee-tools/blob/develop/examples/full-documented-m2ee.yaml)
 # mxjar_repo: /usr/local/share/mendix/
 mxjar_repo: /srv/mendix/${2}/data/runtime

m2ee:
 app_name: ${1}
 app_base: /srv/mendix/${2}
 # m2ee http admin interface and password
 admin_port: 9000
 admin_listen_addresses: "*"
 admin_pass: ${3}
 # mxruntime web interface port
 runtime_port: 8000

 # set to * if you want to have the public runtime port accessible from other
 # hosts than localhost (Mendix >= 4.3.0)
 runtime_listen_addresses: "*"
 # custom java options, like -Xmx256m or -Djava.foo=bar
javaopts: [
   "-Dfile.encoding=UTF-8", "-XX:MaxPermSize=128M", "-Xmx512M", "-Xms512M",
   "-Djava.io.tmpdir=/path/to/project/directory/data/tmp",
 ]
 # file which will be read back by the m2ee log command to provide live logging
 # info this is *not* a file m2ee-tools is going to write to, it is a hint
 # about where to find the log which is written by the mendix application
 # logfile: /var/log/mendix/log
logging:
 - # example of file logging by the platform itself
   name: FileSubscriber
   type: file
   autosubscribe: INFO
   filename: /var/log/mendix/${2}/log
   max_size: 10485760 # bytes(!!)
   max_rotation: 7
mxruntime:
 # Database login credentials
 DatabaseType: PostgreSQL
 # The DatabaseHost contains the database hostname and optionally, also the TCP
 # port number.  It\s possible to use a plain IPv6 address by enclosing it in
 # brackets, like: "[::1]:5432"
 DatabaseHost: "127.0.0.1:5432"
 DatabaseName: mxpgdb
 DatabaseUserName: mxpgusr
 DatabasePassword: mx7gdb_p5w

 MicroflowConstants:
  # put microflow constants in here
  Module.Constant: text
  AnotherModule.AnotherConstant: bla

 # ScheduledEventExecution can be set to ALL, NONE (default) or SPECIFIED
 ScheduledEventExecution: NONE
 # When using ScheduledEventExecution SPECIFIED, provide a list of actions to
 # enable:
 MyScheduledEvents:
  - Module1.Event1
  - Module2.Event2
  - Module3.Event3'

yaml=/home/$app_servicename/.m2ee/m2ee.yaml

# .m2ee creation
echo -e "\nm2ee creation\n"
mkdir -p /home/$app_servicename/.m2ee
#touch $yaml

# create log file
mkdir -p /var/log/mendix/$app_servicename
touch /var/log/mendix/$app_servicename/log

# todo
# make a loop if the $yaml already exists
# ask user what to do
echo -n "$yaml_content" > "$yaml"

# todo
# make a phraser
# Yaml Interpreter
sed -i "s/\${1}/$app_displayname/g" $yaml
sed -i "s/\${2}/$app_servicename/g" $yaml
sed -i "s/\${3}/$app_password/g" $yaml

# Make sure permissions are still correct
chown $app_servicename:$app_servicename -R /home/$app_servicename

exit 0
