#!/bin/bash -e
#
# Mendix Auto Utility (auto-mx)
# Utility which aims to automatically install and
# setup Mendix runtime, and rest of utility's
# which are needed to run Mendix applications.

# todo, refactor existing code
# into functions

echo -e "auto-mx will ... bla bla, continue?"
read -p "[Y]es, [N]o: " inst

for letter in "$inst"; do  

if [[ "$letter" == [Yy] ]]; 
then

continue

elif [[ "$letter" == [Nn]* ]]; 
then
	echo -e "Aborted ...\n"
	exit

else 
	echo -e "\n--------------------------------\n"
	echo    "Non existing value: exiting ..."
	echo -e "\n--------------------------------\n"
	exit 1
fi
done

# user creation
echo -e "\nCreating 'myapp' user ...\n"
adduser --disabled-password --gecos "My First Application,,," myapp

# Mendix location creation
echo -e "\nCreating 'mendix' install/deploy location\n"

# mkdir web/ model/ data/ data/database data/files data/model-upload data/tmp
mkdir -p /srv/mendix/myapp
mkdir -p /srv/mendix/myapp/web
mkdir -p /srv/mendix/myapp/model
mkdir -p /srv/mendix/myapp/data
mkdir -p /srv/mendix/myapp/data/database
mkdir -p /srv/mendix/myapp/data/files
mkdir -p /srv/mendix/myapp/data/model-upload
mkdir -p /srv/mendix/myapp/data/runtime
mkdir -p /srv/mendix/myapp/data/tmp

echo -e "\nFixing permissions\n"
chown myapp:myapp -R /srv/mendix/
# chmod 700 model/ data/
chmod 700 -R /srv/mendix/myapp/data/
chmod 700 -R /srv/mendix/myapp/model/

# m2ee stuff
yamlcont='# Full m2ee.yaml documentation available on:
# https://github.com/mendix/m2ee-tools/blob/develop/examples/full-documented-m2ee.yaml
#
# ~/.m2ee/m2ee.yaml
# user/application specific configuration
#
# All non-essential configuration settings have been omitted in this example
# file. Refer to the full-documented-m2ee.yaml in the examples directory for a
# full list of available options and explanation about them.
#
mxnode:
 # myjar (https://github.com/mendix/m2ee-tools/blob/develop/examples/full-documented-m2ee.yaml)
 # mxjar_repo: /usr/local/share/mendix/
 mxjar_repo: /srv/mendix/myapp/data/runtime

m2ee:
 app_name: My First Application
 app_base: /srv/mendix/myapp/
 # m2ee http admin interface and password
 admin_port: 9000
 admin_listen_addresses: "*"
 admin_pass: mend1x_p5w
 # mxruntime web interface port
 runtime_port: 8000

 # set to * if you want to have the public runtime port accessible from other
 # hosts than localhost (Mendix >= 4.3.0)
 runtime_listen_addresses: "*"
 # custom java options, like -Xmx256m or -Djava.foo=bar
javaopts: [
   "-Dfile.encoding=UTF-8", "-XX:MaxPermSize=128M", "-Xmx512M", "-Xms512M",
   "-Djava.io.tmpdir=/path/to/project/directory/data/tmp",
 ]
 # file which will be read back by the m2ee log command to provide live logging
 # info this is *not* a file m2ee-tools is going to write to, it is a hint
 # about where to find the log which is written by the mendix application
 # logfile: /var/log/mendix/log
logging:
 - # example of file logging by the platform itself
   name: FileSubscriber
   type: file
   autosubscribe: INFO
   filename: /var/log/mendix/log
   max_size: 10485760 # bytes(!!)
   max_rotation: 7
mxruntime:
 # Database login credentials
 DatabaseType: PostgreSQL
 # The DatabaseHost contains the database hostname and optionally, also the TCP
 # port number.  It'\''s possible to use a plain IPv6 address by enclosing it in
 # brackets, like: "[::1]:5432"
 DatabaseHost: "127.0.0.1:5432"
 DatabaseName: mxpgdb
 DatabaseUserName: mxpgusr
 DatabasePassword: mx7gdb_p5w

 MicroflowConstants:
  # put microflow constants in here
  Module.Constant: text
  AnotherModule.AnotherConstant: bla

 # ScheduledEventExecution can be set to ALL, NONE (default) or SPECIFIED
 ScheduledEventExecution: NONE
 # When using ScheduledEventExecution SPECIFIED, provide a list of actions to
 # enable:
 MyScheduledEvents:
  - Module1.Event1
  - Module2.Event2
  - Module3.Event3'


yaml=/home/myapp/.m2ee/m2ee.yaml

# .m2ee creation
echo -n "m2ee creation"
mkdir -p /home/myapp/.m2ee
touch $yaml

# make loop if the $yaml already exists
# ask user what to do
echo -n "$yamlcont" > "$yaml"

# fix m2ee permissions
echo -e "fixing permissions 2!"
chown myapp:myapp -R /home/myapp/

# postgres setup
echo -e "postgres setup"

#su -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"

#su - postgres -c "psql -d template1 -U postgres -c \"CREATE USER mxpgusr WITH PASSWORD' \''mx7gdb_p5w'\'' \" "
su - postgres -c "psql -d template1 -U postgres -c \"CREATE USER mxpgusr WITH PASSWORD 'mx7gdb_p5w' \" "

su - postgres -c "psql -d template1 -U postgres -c \"CREATE DATABASE mxpgdb \" "

su - postgres -c "psql -d template1 -U postgres -c \"GRANT ALL PRIVILEGES ON DATABASE mxpgdb to mxpgusr \" "

# put dialog to ask user if he uploaded the .mda file
# if yes, then continue

# if not, then tell him what to do ...

# continue
# in case user uploads the file
# unpack needs to be run first!
# download runtime
#echo -e "\n runtime download\n"

#su - myapp <<'EOF'
#m2ee "download_runtime"
#EOF

# anything else?

# finish $inst

echo -e "\nDone!\n"
